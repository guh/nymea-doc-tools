#!/bin/bash -e

CURRENT_DIR=$(pwd)
SOURCE_DIR=${CURRENT_DIR}/source
OUTPUT_DIR=${CURRENT_DIR}/output
HTML_DIR=${OUTPUT_DIR}/html
CONFIG_DIR=${CURRENT_DIR}/qdoc-configs
TEMPLATE_DIR=${CURRENT_DIR}/html-templates

BRANCH=master

#------------------------------------------------------------
function usage() {
  cat <<EOF
Usage: $(basename $0) [OPTIONS]

This tool generates a common documentation out of different projects and the overall developer documentation:
  - nymea:                      https://github.com/nymea/nymea
  - nymea-plugins:              https://github.com/nymea/nymea-plugins
  - nymea-mqtt:                 https://github.com/nymea/nymea-mqtt
  - nymea-coap:                 https://github.com/nymea/nymea-coap
  - nymea-gpio:                 https://github.com/nymea/nymea-gpio
  - libnymea-networkmanager:    https://github.com/nymea/libnymea-networkmanager


OPTIONS:
  -b, --branch [branch]         The branch to use for cloning. Example: experimental-silo, landing-silo. Default is master.
  -h, --help                    Show this message

EOF
}


#------------------------------------------------------------
function printGreen() {
    echo -e "\e[1;32m[+] $1\e[0m"
}


#------------------------------------------------------------
function printRed() {
    echo -e "\e[1;31m[!] $1\e[0m"
}

#------------------------------------------------------------
function create-nymea-docs() {
    printGreen "Clean nymea"
    if [ -d ${SOURCE_DIR}/nymea ]; then rm -rf ${SOURCE_DIR}/nymea; fi
    if [ -d ${OUTPUT_DIR}/libnymea ]; then rm -rf ${OUTPUT_DIR}/libnymea; fi
    if [ -d ${OUTPUT_DIR}/libnymea-raw ]; then rm -rf ${OUTPUT_DIR}/libnymea-raw; fi
    mkdir -p ${OUTPUT_DIR}/libnymea
    mkdir -p ${SOURCE_DIR} || true

    printGreen "Get nymea source from branch ${NYMEA_BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/nymea.git

    printGreen "Create libnymea docs"
    cd ${CONFIG_DIR}/libnymea
    qdoc config.qdocconf

    printGreen "Migrate html files"
    for htmlFile in "${OUTPUT_DIR}/libnymea-raw/"*.html; do
        printGreen "--> $htmlFile"
        htmlFileName=`basename $htmlFile`
        ${CURRENT_DIR}/doc-tools.py -i ${htmlFile} -o ${OUTPUT_DIR}/libnymea/${htmlFileName} -q
    done

    printGreen "Copy common data"
    cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/libnymea/
    cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/libnymea/
    cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/libnymea/
    cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/libnymea/

    printGreen "Copy libnymea images"
    cp -r ${SOURCE_DIR}/nymea/doc/images/* ${CURRENT_DIR}/output/libnymea/images/

    writeInterfacesDocumentation
    writeApiDocumentation
}


#------------------------------------------------------------
function create-nymea-plugins-docs() {
    printGreen "Clean nymea-plugins"
    if [ -d ${SOURCE_DIR}/nymea-plugins ]; then rm -rf ${SOURCE_DIR}/nymea-plugins; fi
    if [ -d ${OUTPUT_DIR}/nymea-plugins ]; then rm -rf ${OUTPUT_DIR}/nymea-plugins; fi
    if [ -d ${OUTPUT_DIR}/nymea-plugins-raw ]; then rm -rf ${OUTPUT_DIR}/nymea-plugins-raw; fi

    mkdir -p ${SOURCE_DIR} || true

    printGreen "Get nymea-plugins source from branch ${BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/nymea-plugins.git

    printGreen "Prepare nymea-plugins docs"
    mkdir -p ${OUTPUT_DIR}/nymea-plugins

    printGreen "Create nymea-plugins docs"
    ${CURRENT_DIR}/doc-tools.py -p -g /html-templates/header-plugin.html

    printGreen "Copy common data"
    cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/nymea-plugins/
    cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/nymea-plugins/
    cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/nymea-plugins/
    cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/nymea-plugins/
}


#------------------------------------------------------------
function create-nymea-coap-docs() {
    printGreen "Clean nymea-coap source"
    if [ -d ${SOURCE_DIR}/nymea-coap ]; then rm -rf ${SOURCE_DIR}/nymea-coap; fi
    if [ -d ${OUTPUT_DIR}/nymea-coap ]; then rm -rf ${OUTPUT_DIR}/nymea-coap; fi
    if [ -d ${OUTPUT_DIR}/nymea-coap-raw ]; then rm -rf ${OUTPUT_DIR}/nymea-coap-raw; fi

    mkdir -p ${SOURCE_DIR}
    mkdir -p ${OUTPUT_DIR}/nymea-coap

    printGreen "Get nymea-coap source from branch ${BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/nymea-coap.git

    printGreen "Create nymea-coap docs"
    cd ${CONFIG_DIR}/nymea-coap
    qdoc config.qdocconf

    printGreen "Migrate html files"
    for htmlFile in "${OUTPUT_DIR}/nymea-coap-raw/"*.html; do
        printGreen "--> $htmlFile"
        htmlFileName=`basename $htmlFile`
        ${CURRENT_DIR}/doc-tools.py -i ${htmlFile} -o ${OUTPUT_DIR}/nymea-coap/${htmlFileName} -q
    done

    printGreen "Copy common data"
    cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/nymea-coap/
    cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/nymea-coap/
    cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/nymea-coap/
    cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/nymea-coap/

    printGreen "Copy nymea-coap images"
}


#------------------------------------------------------------
function create-nymea-mqtt-docs() {
    printGreen "Clean nymea-mqtt source"
    if [ -d ${SOURCE_DIR}/nymea-mqtt ]; then rm -rf ${SOURCE_DIR}/nymea-mqtt; fi
    if [ -d ${OUTPUT_DIR}/nymea-mqtt ]; then rm -rf ${OUTPUT_DIR}/nymea-mqtt; fi
    if [ -d ${OUTPUT_DIR}/nymea-mqtt-raw ]; then rm -rf ${OUTPUT_DIR}/nymea-mqtt-raw; fi
    mkdir -p ${SOURCE_DIR}
    mkdir -p ${OUTPUT_DIR}/nymea-mqtt

    printGreen "Get nymea-mqtt source from branch ${BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/nymea-mqtt.git

    printGreen "Create nymea-mqtt docs"
    cd ${CONFIG_DIR}/nymea-mqtt
    qdoc config.qdocconf

    printGreen "Migrate html files"
    for htmlFile in "${OUTPUT_DIR}/nymea-mqtt-raw/"*.html; do
        printGreen "--> $htmlFile"
        htmlFileName=`basename $htmlFile`
        ${CURRENT_DIR}/doc-tools.py -i ${htmlFile} -o ${OUTPUT_DIR}/nymea-mqtt/${htmlFileName} -q
    done

    printGreen "Copy common data"
    cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/nymea-mqtt/
    cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/nymea-mqtt/
    cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/nymea-mqtt/
    cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/nymea-mqtt/

    printGreen "Copy nymea-mqtt images"
}

#------------------------------------------------------------
function create-nymea-gpio-docs() {
    printGreen "Clean nymea-gpio source"
    if [ -d ${SOURCE_DIR}/nymea-gpio ]; then rm -rf ${SOURCE_DIR}/nymea-gpio; fi
    if [ -d ${OUTPUT_DIR}/nymea-gpio ]; then rm -rf ${OUTPUT_DIR}/nymea-gpio; fi
    if [ -d ${OUTPUT_DIR}/nymea-gpio-raw ]; then rm -rf ${OUTPUT_DIR}/nymea-gpio-raw; fi
    mkdir -p ${SOURCE_DIR}
    mkdir -p ${OUTPUT_DIR}/nymea-gpio

    printGreen "Get nymea-gpio source from branch ${BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/nymea-gpio.git

    printGreen "Create nymea-gpio docs"
    cd ${CONFIG_DIR}/nymea-gpio
    qdoc config.qdocconf

    printGreen "Migrate html files"
    for htmlFile in "${OUTPUT_DIR}/nymea-gpio-raw/"*.html; do
        printGreen "--> $htmlFile"
        htmlFileName=`basename $htmlFile`
        fileName=${htmlFileName%%.*}.js
        ${CURRENT_DIR}/doc-tools.py -i ${htmlFile} -o ${OUTPUT_DIR}/nymea-gpio/${fileName} -d
    done

    #printGreen "Copy common data"
    #cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/nymea-gpio/
    #cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/nymea-gpio/
    #cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/nymea-gpio/
    #cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/nymea-gpio/
}

#------------------------------------------------------------
function create-libnymea-networkmanager-docs() {
    printGreen "Clean libnymea-networkmanager source"
    if [ -d ${SOURCE_DIR}/libnymea-networkmanager ]; then rm -rf ${SOURCE_DIR}/libnymea-networkmanager; fi
    if [ -d ${OUTPUT_DIR}/libnymea-networkmanager ]; then rm -rf ${OUTPUT_DIR}/libnymea-networkmanager; fi
    if [ -d ${OUTPUT_DIR}/libnymea-networkmanager-raw ]; then rm -rf ${OUTPUT_DIR}/libnymea-networkmanager-raw; fi
    mkdir -p ${SOURCE_DIR}
    mkdir -p ${OUTPUT_DIR}/libnymea-networkmanager

    printGreen "Get libnymea-networkmanager source from branch ${BRANCH}"
    cd ${SOURCE_DIR}
    git clone -b ${BRANCH} --depth 1 https://github.com/nymea/libnymea-networkmanager.git

    printGreen "Create libnymea-networkmanager docs"
    cd ${CONFIG_DIR}/libnymea-networkmanager
    qdoc config.qdocconf

    printGreen "Migrate html files"
    for htmlFile in "${OUTPUT_DIR}/libnymea-networkmanager-raw/"*.html; do
        printGreen "--> $htmlFile"
        htmlFileName=`basename $htmlFile`
        ${CURRENT_DIR}/doc-tools.py -i ${htmlFile} -o ${OUTPUT_DIR}/libnymea-networkmanager/${htmlFileName} -q -g /html-templates/header-networkmanager.html
    done

    printGreen "Copy common data"
    cp -rv ${TEMPLATE_DIR}/favicons/ ${OUTPUT_DIR}/libnymea-networkmanager/
    cp -rv ${TEMPLATE_DIR}/images/ ${OUTPUT_DIR}/libnymea-networkmanager/
    cp -rv ${TEMPLATE_DIR}/scripts ${OUTPUT_DIR}/libnymea-networkmanager/
    cp -rv ${TEMPLATE_DIR}/styles ${OUTPUT_DIR}/libnymea-networkmanager/

}

function writeInterfacesDocumentation() {
    printGreen "Prepare interfaces documentation"
    python ${CURRENT_DIR}/generate-interfaces-markdown.py -i ${SOURCE_DIR}/nymea/libnymea/interfaces/ -o ${OUTPUT_DIR}/interfaces-generated.md

    # Merge interfaces.md.in content with generated content
    printGreen "Merge interfaces docs with generated content"
    cp ${CURRENT_DIR}/../docs/developers/integrations/interfaces.md.in ${OUTPUT_DIR}/
    #INTERFACES_GENERATED=$(cat ${OUTPUT_DIR}/interfaces-generated.md)
    REPLACESTRING=@@GENERATED@@
    FILETOINSERT=${OUTPUT_DIR}/interfaces-generated.md
    FILETOMODIFY=${OUTPUT_DIR}/interfaces.md.in
    sed -e "/$REPLACESTRING/r $FILETOINSERT" -e "/$REPLACESTRING/d" $FILETOMODIFY > ${OUTPUT_DIR}/interfaces.md
    cp -v ${OUTPUT_DIR}/interfaces.md ${CURRENT_DIR}/../docs/developers/integrations/interfaces.md
}

function writeApiDocumentation() {
    printGreen "Prepare API documentation"
    python ${CURRENT_DIR}/generate-api-markdown.py -j ${SOURCE_DIR}/nymea/tests/auto/api.json -o ${OUTPUT_DIR}/json-rpc-api-generated.md

    # Merge interfaces.md.in content with generated content
    printGreen "Merge API docs with generated content"
    cp ${CURRENT_DIR}/../docs/developers/clients/raw-api.md.in ${OUTPUT_DIR}/
    #INTERFACES_GENERATED=$(cat ${OUTPUT_DIR}/interfaces-generated.md)
    REPLACESTRING=@@GENERATED@@
    FILETOINSERT=${OUTPUT_DIR}/json-rpc-api-generated.md
    FILETOMODIFY=${OUTPUT_DIR}/raw-api.md.in
    sed -e "/$REPLACESTRING/r $FILETOINSERT" -e "/$REPLACESTRING/d" $FILETOMODIFY > ${OUTPUT_DIR}/raw-api.md
    cp -v ${OUTPUT_DIR}/raw-api.md ${CURRENT_DIR}/../docs/developers/clients/raw-api.md
}


#------------------------------------------------------------
# Main
#------------------------------------------------------------

while [ "$1" != "" ]; do
    case $1 in
        -b | --branch )
            BRANCH=$2
            shift;;
        -h | --help )
            usage && exit 0;;
        * )
            usage && exit 1;;
    esac
    shift
done

create-nymea-docs


#create-nymea-plugins-docs
#create-nymea-coap-docs
#create-nymea-mqtt-docs
#create-nymea-gpio-docs
#create-libnymea-networkmanager-docs

#printGreen "Build html directory ${HTML_DIR}"
#if [ -d ${HTML_DIR} ]; then rm -rf ${HTML_DIR}; fi
#mkdir -p ${HTML_DIR} || true
#cp ${OUTPUT_DIR}/nymea-docs/*.html ${HTML_DIR}

#cp -r ${TEMPLATE_DIR}/scripts ${HTML_DIR}
#cp -r ${TEMPLATE_DIR}/styles ${HTML_DIR}
#cp -r ${TEMPLATE_DIR}/favicons ${HTML_DIR}
#cp -r ${TEMPLATE_DIR}/images ${HTML_DIR}

#cp -r ${OUTPUT_DIR}/nymea ${HTML_DIR}
#cp -r ${OUTPUT_DIR}/nymea-plugins ${HTML_DIR}
#cp -r ${OUTPUT_DIR}/nymea-coap ${HTML_DIR}
#cp -r ${OUTPUT_DIR}/nymea-mqtt ${HTML_DIR}
#cp -r ${OUTPUT_DIR}/nymea-gpio ${HTML_DIR}
#cp -r ${OUTPUT_DIR}/libnymea-networkmanager ${HTML_DIR}
